#!/usr/bin/env python
import argparse
import configparser
import logging
import os
import shutil
import sys
import time

try:
    import pkg_resources
except Exception:
    pass

from yaset.helpers.config import extract_params
from yaset.learn import learn_model
from yaset.apply import apply_model


def parse_feature_columns(value):
    """
    Parse feature parameter
    :param value: feature value (str)
    :return:
    """

    raw_parts = value.split(",")
    raw_parts = [item.strip(" ") for item in raw_parts]

    final_list = [int(item) for item in raw_parts]

    return final_list


def log_message(message):

    logging.info("{} {} {}".format(
        "=" * 10,
        message,
        "=" * (70 - len(message) - 2 - 10)
    ))


if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("--debug", action='store_true')

    subparsers = parser.add_subparsers(title="Sub-commands", description="Valid sub-commands",
                                       help="Valid sub-commands", dest="subparser_name")

    # 'LEARN' subparser: learn a new model
    parser_learn = subparsers.add_parser('LEARN', help="Learn model on train data")
    parser_learn.add_argument("--config", help="Configuration file (.ini format)", dest="config", type=str,
                              required=True)

    # 'APPLY' subparser: apply a pretrained model
    parser_test = subparsers.add_parser('APPLY', help="Apply model on test data")
    parser_test.add_argument("--model-path", help="Path to the model", dest="model_path", type=str, required=True)
    parser_test.add_argument("--input-file", help="Path to the tabulated test file", dest="input_file", required=True)
    parser_test.add_argument("--working-dir", help="Path where a working directory will be created", dest="working_dir",
                             required=True)

    # 'CHECK-CONFIG' subparser: check configuration file
    parser_config = subparsers.add_parser('CHECK-CONFIG', help="Performs configuration file checking."
                                                               "Error will be raised if value are not correctly set.")
    parser_config.add_argument("--config", help="Configuration file (.ini format)", dest="config", type=str,
                               required=True)

    args = parser.parse_args()

    # Timestamp for directory naming
    timestamp = time.strftime("%Y%m%d-%H%M%S")

    # LOGGING
    # ===============================================================
    # Logging to stdout

    log = logging.getLogger('')
    log_format = logging.Formatter("%(asctime)s %(levelname)s %(message)s")

    # Setting debug level
    if args.debug:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)

    # Toning down the verbosity of gensim (in both NORMAL and DEBUG modes)
    logging.getLogger('gensim').setLevel(logging.WARNING)

    # Adding a stdout handler
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(log_format)
    log.addHandler(ch)

    if args.subparser_name == "CHECK-CONFIG":

        # Check if config file does exist
        if not os.path.isfile(os.path.abspath(args.config)):
            raise FileNotFoundError("The configuration file you specified does not exist: {}".format(
                os.path.abspath(args.config)
            ))

        parsed_configuration = configparser.ConfigParser(allow_no_value=True)
        parsed_configuration.read(os.path.abspath(args.config))

        TRAINING_PARAMS_FILE = pkg_resources.resource_filename('yaset', 'desc/TRAINING_PARAMS_DESC.json')
        DATA_PARAMS_DESC_FILE = pkg_resources.resource_filename('yaset', 'desc/DATA_PARAMS_DESC.json')
        BILSTMCHARCRF_PARAMS_DESC_FILE = pkg_resources.resource_filename('yaset', 'desc/BILSTMCHARCRF_PARAMS_DESC.json')

        log_message("DATA PARAMETERS")

        data_params = extract_params(parsed_configuration["data"], DATA_PARAMS_DESC_FILE)
        for k, v in sorted(data_params.items()):
            logging.info("{}: {}".format(k, v))

        log_message("TRAINING PARAMETERS")

        training_params = extract_params(parsed_configuration["training"], TRAINING_PARAMS_FILE)
        for k, v in sorted(training_params.items()):
            logging.info("{}: {}".format(k, v))

        if training_params["model_type"] == "bilstm-char-crf":
            log_message("BILSTMCHARCRF MODEL PARAMETERS")
            bilstm_params = extract_params(parsed_configuration["bilstm-char-crf"], BILSTMCHARCRF_PARAMS_DESC_FILE)
            for k, v in sorted(bilstm_params.items()):
                logging.info("{}: {}".format(k, v))

        logging.info("Everything seems fine with your configuration file, you are ready to take off")

    elif args.subparser_name == "LEARN":

        # Check if config file does exist
        if not os.path.isfile(os.path.abspath(args.config)):
            raise FileNotFoundError("The configuration file you specified does not exist: {}".format(
                os.path.abspath(args.config)
            ))

        # Creating a configparser parser and parsing configuration
        parsed_configuration = configparser.ConfigParser(allow_no_value=True)
        parsed_configuration.read(os.path.abspath(args.config))

        current_working_directory = learn_model(parsed_configuration)

        target_model_configuration_path = os.path.join(os.path.abspath(current_working_directory), "config.ini")
        shutil.copy(os.path.abspath(args.config), target_model_configuration_path)

    elif args.subparser_name == "APPLY":

        model_path = os.path.abspath(args.model_path)
        input_file = os.path.abspath(args.input_file)
        working_dir = os.path.abspath(args.working_dir)

        if not os.path.isdir(model_path):
            raise NotADirectoryError("The model path you specified does not exist: {}".format(model_path))

        if not os.path.isfile(input_file):
            raise FileNotFoundError("The input file you specified does not exist: {}".format(input_file))

        if not os.path.isdir(working_dir):
            raise NotADirectoryError("The working directory you specified does not exist: {}".format(working_dir))

        apply_model(model_path, input_file, working_dir, timestamp)
